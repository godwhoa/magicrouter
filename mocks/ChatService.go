// Code generated by mockery v2.36.1. DO NOT EDIT.

package mocks

import (
	context "context"

	http "net/http"

	json "encoding/json"

	mock "github.com/stretchr/testify/mock"
)

// ChatService is an autogenerated mock type for the ChatService type
type ChatService struct {
	mock.Mock
}

// ChatCompletion provides a mock function with given fields: ctx, req, model, token
func (_m *ChatService) ChatCompletion(ctx context.Context, req json.RawMessage, model string, token string) (*http.Response, error) {
	ret := _m.Called(ctx, req, model, token)

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, json.RawMessage, string, string) (*http.Response, error)); ok {
		return rf(ctx, req, model, token)
	}
	if rf, ok := ret.Get(0).(func(context.Context, json.RawMessage, string, string) *http.Response); ok {
		r0 = rf(ctx, req, model, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, json.RawMessage, string, string) error); ok {
		r1 = rf(ctx, req, model, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewChatService creates a new instance of ChatService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewChatService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ChatService {
	mock := &ChatService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
